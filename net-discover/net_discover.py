#!/usr/bin/env python

"""
Este script escanea una red en busca de hosts activos y muestra sus direcciones IP y MAC.
Uso: python3 arp_scanner.py -t <direcciÃ³n IP o rango de direcciones IP>
"""

import sys
import argparse
import scapy.all as scapy


def get_arguments():
    """This function gets input from command line terminal"""
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", dest="target",
                        help="Target to be scanned / IP Range")
    options = parser.parse_args()
    if not options.target:
        parser.error(
            "[-] Please specify a target. Use --help for more information.")
    else:
        return


def scan(ip):
    # who was the IP?:
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    # arp and broadcast request combined
    arp_request_broadcast = broadcast/arp_request
    # Sending the packets to clients and receive response:
    answered_packets = scapy.srp(arp_request_broadcast,
                                 timeout=1, verbose=False)[0]

    clients_list = []
    for element in answered_packets:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)
    return (clients_list)

    #Use scapy.ls(scapy.Ether) to check which fields are needed to be changed.
    #Use .show() to see what is going to be sent over crafted packet.


def print_results(results_list):
    # Header
    print("IP\t\t\tMAC Address")
    print("----------------------------------------------")
    for client in results_list:
        print(client["ip"] + "\t\t" + client["mac"])


options = get_arguments()
result = scan(options.target)
print_results(result)
