#!/usr/bin/env python

import subprocess  # allow us to run terminal commands
import argparse  # allows us to get arguments for user inputs
import re  # Regular expressions module


def get_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", dest="interface",
                        help="Interface to change its MAC Address")
    parser.add_argument("-m", "--mac", dest="new_mac", help="New MAC Address")
    (options) = parser.parse_args()
    if not options.interface:
        parser.error(
            "[-] Please specify an interface. Use --help for more information.")
    elif not options.new_mac:
        parser.error(
            "[-] Please specify a new MAC address. Use --help for more information.")
    else:
        return options


def change_mac(interface, new_mac):
    print(f"[+] Changing MAC Address for {interface} to {new_mac}")
    subprocess.call(["ifconfig", interface, "down"])
    subprocess.call(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.call(["ifconfig", interface, "up"])


def get_current_mac(interface):
    ifconfig_result = subprocess.check_output(["ifconfig", interface])
    mac_address_match = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w",
                                  str(ifconfig_result))  # return only matched resources
    if mac_address_match:
        return mac_address_match.group(0)  # Returns the first result
    else:
        print("[-] I could not read the MAC Address.")


options = get_arguments()
current_mac = get_current_mac(options.interface)
print("Current MAC: " + str(current_mac))

change_mac(options.interface, options.new_mac)
current_mac = get_current_mac(options.interface)
if current_mac == options.new_mac:
    print("[+] MAC address was successfully changed to " + current_mac)
else:
    print("[-] MAC address was not changed")
